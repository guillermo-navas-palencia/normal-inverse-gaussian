C++ implementation
==================

Case beta = 0                                                   DONE
-------------
2. Code optimization:
    2.1. FMA operations

3. Optimize uniform asymptotic alpha


General case
------------
1. Implementation |x-mu| -> infinite                            DONE
2. Implementation uniform asymptotic gamma -> infinite          TBC
3. Implementation beta -> 0                                     DONE
4. Implementation |x-mu| -> 0                                   DONE
    4.1. Bessel series                                          DONE
    4.2. Incomplete gamma series                    NUMERICAL ISSUES
    4.3. Hermite series                                         DONE
5. Implementation delta -> inf                                  DONE

1. Improve numerical integration code.                          DONE
    1.1. Accuracy using saddle point to split integration path
    1.2. Code optimizations: FMA / SIMD via OpenMP

1. Generate test sets
    1.1. Small
    1.2. Large


Algorithm: small

    hermite_series_xmu: errors (3491 / 5000)  
        (x-mu) ** 2 <= 2.25 & delta >= 2.5    -> rule: 695 / 5000

    hermite_series_beta: errors (2217 / 5000) 
        abs(beta) <= 0.5 & alpha >= 1.0       -> rule:  780 / 5000  | max err: 1.8e-12
        abs(beta) <= 1.0 & alpha >= 2.5       -> rule:  719 / 5000  | max err: 7.6e-11
        abs(beta) <= 1.0 & gamma >= 1.5       -> rule: 1158 / 5000  | max_err: 7.6e-11
        abs(beta) <= 0.5 & gamma >= 0.75      -> rule:  877 / 5000  | max_err: 1.8e-11

    bessel_series_xmu: errors (3010 / 5000)
        (x-mu)**2 <= 3.0 & delta >= 1.0 & abs(beta) <= 1.5 & gamma >= 0.75 -> rule: 577 / 5000

    asymptotic_delta: errors (5000 / 5000)

    asymptotic_xmu: errors (5000 / 5000)


Algorithm: large

    nig_integration: errors (525 / 5000) -> precision=300 -> (19 / 525)

    hermite_series_xmu:  errors (3765 / 5000)
    hermite_series_beta: errors (4208 / 5000)
    bessel_series_xmu:   errors (4472 / 5000)
    
    asymptotic_delta: errors (3875 / 5000)
        abs(beta) / alpha >= 0.5 & delta >= 15 & (x-mu)**2 <= 20 -> rule: 674 / 5000

    asymptotic_xmu: errors (4606 / 5000)
        (x-mu)**2 >= 100 & alpha / omega >= 0.25 -> rule: 1115 / 5000



Case x = mu                                                     DONE
-----------
1. Code optimization:
    1.1. FMA
    1.2. Bessel K
    1.3. unsigned int -> size_t


Backup
------
Check result is in (0, 1) and use numerical integration as a backup


Testing
=======
1. Create Python scripts for each case. DONE
2. Summary statistics and plots. DONE


Comparison Bessel K0/K1                                         DONE 
======================= 
N = 10_000
x = linspace (0, 700)

clang:
    specfun : 8.1e-05 seconds
    std     : 5.9e-03 seconds

gcc:
    specfun : same
    std     : same

Same results for K1.


Comparison erfc -> affects uniform asymptotic alpha/gamma       DONE
===============


Comparison norm_cdf                                             DONE
===================